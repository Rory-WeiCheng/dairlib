#pragma once

#include <vector>

#include <Eigen/Dense>

#include "drake/common/sorted_pair.h"
#include "drake/multibody/plant/multibody_plant.h"
#include "dairlib/lcmt_learning_data.hpp"
#include "solvers/lcs.h"

namespace dairlib {
namespace solvers {
class LearningData {
 public:
  /// Constructor for the packed data needed for learning: state, input, state prediction, reference lcs
  /// @param state current state
  /// @param input current input
  /// @param state_pred state prediction
  /// @param lcs_model reference lcs generated by the model
  LearningData() = default;
  LearningData(const Eigen::VectorXd& state,
      const Eigen::VectorXd& input,
      const Eigen::VectorXd& state_pred,
      const LCS& LCS_model,
      const double& timestamp);

  void CopyLearningDataToLcm(lcmt_learning_data* msg) const;

 public:
  Eigen::VectorXd state_;
  Eigen::VectorXd input_;
  Eigen::VectorXd state_pred_;
  LCS LCS_model_;
  double timestamp_;
};

}  // namespace solvers
}  // namespace dairlib
